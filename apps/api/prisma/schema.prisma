generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             String         @id @default(uuid())
  nombre         String
  email          String         @unique
  passwordHash   String         @map("password_hash")
  estado         String?
  creadoEn       DateTime       @default(now()) @map("creado_en")
  actualizadoEn  DateTime       @updatedAt @map("actualizado_en")
  notificaciones Notificacion[]
  participante   Participante?
  sesiones       Sesion[]       @relation("UsuarioResponsableSesiones")
  roles          UsuarioRol[]
}

model Rol {
  id       Int          @id @default(autoincrement())
  nombre   String       @unique
  usuarios UsuarioRol[]
}

model UsuarioRol {
  usuarioId String
  rolId     Int
  rol       Rol     @relation(fields: [rolId], references: [id])
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  @@id([usuarioId, rolId])
  @@map("usuario_rol")
}

model Participante {
  id            String              @id @default(uuid())
  usuarioId     String              @unique @map("usuario_id")
  documento     String?
  telefono      String?
  genero        String?
  fechaNac      DateTime?           @map("fecha_nac")
  creadoEn      DateTime            @default(now()) @map("creado_en")
  actualizadoEn DateTime            @updatedAt @map("actualizado_en")
  asistencias   Asistencia[]
  cvs           Cv[]
  inscripciones Inscripcion[]
  usuario       Usuario             @relation(fields: [usuarioId], references: [id])
  perfiles      PerfilCompetencia[]
  feedbacks     Retroalimentacion[]

  @@map("participantes")
}

model Taller {
  id            String              @id @default(uuid())
  tema          String
  modalidad     String
  cupos         Int?
  fechaInicio   DateTime?           @map("fecha_inicio")
  fechaFin      DateTime?           @map("fecha_fin")
  sede          String?
  estado        String?
  creadoEn      DateTime            @default(now()) @map("creado_en")
  actualizadoEn DateTime            @updatedAt @map("actualizado_en")
  inscripciones Inscripcion[]
  feedbacks     Retroalimentacion[]
  sesiones      Sesion[]

  @@map("talleres")
}

model Sesion {
  id            String       @id @default(uuid())
  tallerId      String       @map("taller_id")
  fecha         DateTime
  horaInicio    DateTime?    @map("hora_inicio")
  horaFin       DateTime?    @map("hora_fin")
  responsableId String?      @map("responsable_id")
  creadoEn      DateTime     @default(now()) @map("creado_en")
  actualizadoEn DateTime     @updatedAt @map("actualizado_en")
  asistencias   Asistencia[]
  responsable   Usuario?     @relation("UsuarioResponsableSesiones", fields: [responsableId], references: [id])
  taller        Taller       @relation(fields: [tallerId], references: [id])

  @@index([tallerId])
  @@map("sesiones")
}

model Inscripcion {
  id             String       @id @default(uuid())
  tallerId       String       @map("taller_id")
  participanteId String       @map("participante_id")
  origen         String?
  estado         String?
  dedupeHash     String?      @map("dedupe_hash")
  creadoEn       DateTime     @default(now()) @map("creado_en")
  actualizadoEn  DateTime     @updatedAt @map("actualizado_en")
  participante   Participante @relation(fields: [participanteId], references: [id])
  taller         Taller       @relation(fields: [tallerId], references: [id])

  @@unique([tallerId, participanteId])
  @@index([tallerId])
  @@index([participanteId])
  @@map("inscripciones")
}

model Asistencia {
  id             String                @id @default(uuid())
  sesionId       String                @map("sesion_id")
  participanteId String                @map("participante_id")
  estado         String?
  tomadoEn       DateTime?             @map("tomado_en")
  creadoEn       DateTime              @default(now()) @map("creado_en")
  actualizadoEn  DateTime              @updatedAt @map("actualizado_en")
  participante   Participante          @relation(fields: [participanteId], references: [id])
  sesion         Sesion                @relation(fields: [sesionId], references: [id])
  evidencias     EvidenciaAsistencia[]

  @@unique([sesionId, participanteId])
  @@index([sesionId])
  @@index([participanteId])
  @@map("asistencias")
}

model EvidenciaAsistencia {
  id           String     @id @default(uuid())
  asistenciaId String     @map("asistencia_id")
  tipo         String?
  url          String?
  creadoEn     DateTime   @default(now()) @map("creado_en")
  asistencia   Asistencia @relation(fields: [asistenciaId], references: [id])

  @@index([asistenciaId])
  @@map("evidencias_asistencia")
}

model Retroalimentacion {
  id             String       @id @default(uuid())
  tallerId       String       @map("taller_id")
  participanteId String       @map("participante_id")
  puntaje        Int?
  comentario     String?
  creadoEn       DateTime     @default(now()) @map("creado_en")
  participante   Participante @relation(fields: [participanteId], references: [id])
  taller         Taller       @relation(fields: [tallerId], references: [id])

  @@index([tallerId])
  @@index([participanteId])
  @@map("retroalimentaciones")
}

model Notificacion {
  id        String   @id @default(uuid())
  usuarioId String   @map("usuario_id")
  canal     String?
  tipo      String?
  estado    String?
  creadoEn  DateTime @default(now()) @map("creado_en")
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@map("notificaciones")
}

model Cv {
  id             String       @id @default(uuid())
  participanteId String       @map("participante_id")
  url            String
  version        String?
  texto          String?      @db.Text
  subidoEn       DateTime     @default(now()) @map("subido_en")
  participante   Participante @relation(fields: [participanteId], references: [id])

  @@index([participanteId])
  @@map("cvs")
}

model Competencia {
  id        String              @id @default(uuid())
  nombre    String              @unique
  categoria String?
  perfiles  PerfilCompetencia[]

  @@map("competencias")
}

model PerfilCompetencia {
  id             String       @id @default(uuid())
  participanteId String       @map("participante_id")
  competenciaId  String       @map("competencia_id")
  nivel          Int?
  confianza      Float?
  fuente         String?
  actualizadoEn  DateTime     @updatedAt @map("actualizado_en")
  competencia    Competencia  @relation(fields: [competenciaId], references: [id])
  participante   Participante @relation(fields: [participanteId], references: [id])

  @@unique([participanteId, competenciaId])
  @@index([participanteId])
  @@index([competenciaId])
  @@map("perfiles_competencias")
}
